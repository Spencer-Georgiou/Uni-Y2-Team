' This diagram is written in plantuml with the aid of
' jebbs' [PlantUML](https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml) plugin in VSCode
@startuml
' diagram format
skinparam sequenceArrowThickness 1
skinparam maxmessagesize 200
skinparam BoxPadding 50
skinparam SequenceMessageAlign first
!pragma teoz true

' actors
actor Waiter
actor Kitchen
actor Customer
' frontend entities
box Frontend
boundary WaiterHub
boundary KitchenHub
boundary OrderPage
boundary FoodMenuPage
end box
' backend entities
box Backend
entity "/api/order" as OrderAPI
entity "/api/table" as TableAPI
entity "/api/payment" as PaymentAPI
entity "/api/menu" as MenuAPI
end box
' database entities
boundary StripePage
database Database
== Order Creation ==
group customer creates an order
Customer -> OrderPage: create an order
OrderPage -> OrderAPI: POST with the table number and ordered menu items
OrderAPI -> Database: create an order with status "Confirming" and the content
Database -> OrderAPI: done
OrderAPI -> OrderPage: the order is created
WaiterHub -> WaiterHub: render the order in "Orders" Column
& OrderPage -> OrderPage: render the progress to "Waiting For Confirmation"
WaiterHub -> Waiter: display the order in "Orders" Column
& OrderPage -> Customer: display the progress in "Waiting For Confirmation"
end group
group waiter creates an order
Waiter -> WaiterHub: create an order
WaiterHub -> OrderAPI: POST with the table number and ordered menu items
OrderAPI -> Database: create an order with the given status and content
Database -> OrderAPI: done
OrderAPI -> WaiterHub: the order is created
WaiterHub -> WaiterHub: render the order in "Orders" Column
& OrderPage -> OrderPage: render the progress to "Waiting For Confirmation"
WaiterHub -> Waiter: display the order in "Orders" Column
& OrderPage -> Customer: display the progress in "Waiting For Confirmation"
end group
== Order Confirmation ==
Waiter -> WaiterHub: confirms an order
WaiterHub -> OrderAPI: PATCH with its order id, the waiter id and the status "Preparing"
OrderAPI -> Database: update the order with given status and the waiter id
Database -> OrderAPI: done
OrderAPI -> WaiterHub: the order is updated
WaiterHub -> WaiterHub: render the updated order to "Orders"
& KitchenHub -> KitchenHub: render the order
& OrderPage -> OrderPage: render the progress to "Preparing"
KitchenHub -> Kitchen: display the order
& WaiterHub -> Waiter: display the order in "Orders"
& OrderPage -> Customer: display the progress at "Preparing"
== Order Preparation ==
Kitchen -> KitchenHub: the order is prepared
KitchenHub -> OrderAPI: PATCH with its order id and status "Delivering"
OrderAPI -> Database: update the order with the given status
Database -> OrderAPI: done
OrderAPI -> KitchenHub: the order is updated
KitchenHub -> KitchenHub: avoid to render the order
& WaiterHub -> WaiterHub: render the order to "Ready to Deliver"
& OrderPage -> OrderPage: render the progress to "Delivering"
KitchenHub -> Kitchen: no longer display the order
& WaiterHub -> Waiter: display the order in "Ready to Deliver"
& OrderPage -> Customer: display the progess at "Delivering"
== Order Delivery ==
Waiter -> WaiterHub: the order is delivered
WaiterHub -> OrderAPI: PATCH with the order id and status "Delivered"
OrderAPI -> Database: update the order with the given status
Database -> OrderAPI: done
OrderAPI -> WaiterHub: the order is updated
WaiterHub -> WaiterHub: render the order to "Deliverd"
& OrderPage -> OrderPage: render progress to "Enjoy!"
& KitchenHub -> KitchenHub: not render the order
WaiterHub -> Waiter: display the order in 
& KitchenHub -> Kitchen: not display the order
& OrderPage -> Customer: display the progress at "Enjoy!"
== Order Cancellation ==
loop routinely
WaiterHub -> OrderAPI: GET to get an order info
OrderAPI -> WaiterHub: return the order info
end loop
alt order status is "Delivered"
WaiterHub -> WaiterHub: grey out the cancel button
WaiterHub -> Waiter: cancellation is unavailable
else
WaiterHub -> Waiter: cancellation is available
Waiter -> WaiterHub: cancel the order
WaiterHub -> OrderAPI: DELETE with its order id
OrderAPI -> Database: delete the order with the id
Database -> OrderAPI: done
OrderAPI -> WaiterHub: the order is deleted
WaiterHub -> WaiterHub: not render the order
& KitchenHub -> KitchenHub: not render the order
& OrderPage -> OrderPage: delete the page itself
KitchenHub -> Kitchen: no longer display the order
& WaiterHub -> Waiter: no longer display the order
& OrderPage -> Customer: page is inaccessible
end alt
== Order Completion ==
alt order status is "Delivered"
Waiter -> WaiterHub: completes an order
WaiterHub -> OrderAPI: DELETE to remove the order
WaiterHub -> OrderAPI: DELETE with its order id
OrderAPI -> Database: delete the order with the id
Database -> OrderAPI: done
OrderAPI -> WaiterHub: the order is deleted
WaiterHub -> WaiterHub: not render the order
& OrderPage -> OrderPage: delete the page itself
KitchenHub -> Kitchen: no longer display the order
& WaiterHub -> Waiter: no longer display the order
& OrderPage -> Customer: page is inaccessible
end
== Online Payment ==
Customer -> OrderPage: pay the order online
OrderPage -> PaymentAPI: POST with order id
PaymentAPI -> OrderPage: return the Stripe URL for the order
OrderPage -> StripePage: open the page with the given URL
StripePage -> Customer: display the payment
Customer -> Customer: type payment info
Customer -> StripePage: submit the payment form
StripePage -> PaymentAPI: GET with order id
PaymentAPI -> Database: update the paid status of the order with the given id to true
Database -> PaymentAPI: done
WaiterHub -> OrderAPI: GET to get all order info
OrderAPI -> WaiterHub: return all order info
alt order is paid
WaiterHub -> WaiterHub: render a "PAID" icon next to the order
WaiterHub -> Waiter: display that the order has been paid
else order is not paid
WaiterHub -> WaiterHub: render a "NOT PAID" icon next to the order
WaiterHub -> Waiter: display that the order has not been paid
end alt
== Calling Help ==
Customer -> OrderPage: click "Call Waiter" button
OrderPage -> OrderAPI: PATCH with the order id and calling_waiter as True
OrderAPI -> Database: update the order with the given id and calling_waiter value
Database -> OrderAPI: Done
WaiterHub -> OrderAPI: GET to get all order info
OrderAPI -> WaiterHub: return all order info
WaiterHub -> WaiterHub: render the table number  the order has in "Customers need help" Column
WaiterHub -> Waiter: display a table needs help
== Resolving Help ==
Waiter -> WaiterHub: click "Problem solved" button
WaiterHub -> OrderAPI: PATCH with the order id and calling_waiter as False
OrderAPI -> Database: update the order with the given id and calling_waiter value
Database -> OrderAPI: Done
WaiterHub -> OrderAPI: GET to get all order info
OrderAPI -> WaiterHub: return all order info
WaiterHub -> WaiterHub: not render the table number the order has in "Customers need help" Column
WaiterHub -> Waiter: no longer display the table in "Customers need help" Column
== Viewing Food Menu ==
alt viewing food menu
Customer -> FoodMenuPage: view Food Menu
FoodMenuPage -> MenuAPI: GET all menu items under category "Food"
MenuAPI -> Database: fetch info of all menu items
Database -> MenuAPI: done
MenuAPI -> FoodMenuPage: return a list of food menu items
FoodMenuPage -> FoodMenuPage: return the list of menu items
FoodMenuPage -> Customer: display the list of menu items
else viewing drink menu
Customer -> FoodMenuPage: view Drink Menu
FoodMenuPage -> MenuAPI: GET all menu items under category "Drink"
MenuAPI -> Database: fetch info of all menu items
Database -> MenuAPI: done
MenuAPI -> FoodMenuPage: return a list of drink menu items
FoodMenuPage -> FoodMenuPage: return the list of menu items
FoodMenuPage -> Customer: display the list of menu items
end alt
@enduml
