stages:
  # set up the ci enviroment
  - initialize
  # test source codes
  - test
  # check if a app is runnable
  - build

# a template for a job to specify the version of python
.python:
  image: python:3.12
  before_script:
    - python --version

# a template to specify the version of node
.node_image:
  image: node:20.11.0
  before_script:
    - node --version

# a template to cache the node dependencies for each pipeline
.node_cache:
  before_script:
    - cd app/ui
    # freshly install node dependecies from caches with error logs only
    - npm clean-install --cache .npm --prefer-offline --loglevel=error
    - cd $CI_PROJECT_DIR
  cache:
    # the identifer of the cache is a combination of
    # the instance-level pipeline ID and project-level pipeline ID
    key: $CI_PIPELINE_ID.$CI_PIPELINE_IID
    paths:
      - app/ui/.npm/

# a template to intergrate the settings of Node.js
.node:
  extends:
    - .node_image
    - .node_cache
  before_script:
    # combine the before_scripts of each node settings
    - !reference [.node_image, before_script]
    - !reference [.node_cache, before_script]
    - cd app/ui

# initialize the flask enviroment
initialize-flask-job:
  stage: initialize
  extends: .python
  script:
    - cd app/api
    # install dependencies in virtual enviroment
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  artifacts:
    # save the created virtual enviroment for following jobs
    paths:
      - app/api/venv
    expire_in: 1 hour

# test the source codes of the flask app
test-flask-job:
  stage: test
  extends: .python
  script:
    - cd app/api
    - source venv/bin/activate
    # set app/api as the root path of python project
    - export PYTHONPATH=$(pwd)
    - cd test
    - python -m pytest

# check if the flask app can run
build-flask-job:
  stage: build
  extends: .python
  script:
    - cd app/api
    - source venv/bin/activate
    - pip install -r requirements.txt
    - flask shell

# test the source codes of the react app
test-react-job:
  extends: .node
  stage: test
  script:
    # disable interactive prompts when testing
    - export CI=true
    - npm test

# check if the react app can be built
build-react-job:
  extends: .node
  stage: build
  script:
    # linting check is not a part of the build job
    - export DISABLE_ESLINT_PLUGIN=true
    - npm run build
